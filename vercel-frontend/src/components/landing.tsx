/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/t2FzPqLEgx2
 */
import { CardTitle, CardDescription, CardHeader, CardContent, Card, CardFooter } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { useState, useEffect, useCallback } from "react"
import { Github, Upload, Rocket, ExternalLink, Copy, Check, RefreshCw } from "lucide-react"
import axios from "axios"
import { ThemeToggle } from "./theme-toggle"

const BACKEND_UPLOAD_URL = "http://34.100.177.101:3001";

interface StatusLog {
  ts: number
  message: string
  kind?: "info" | "success" | "error"
}

export function Landing() {
  const [repoUrl, setRepoUrl] = useState("");
  const [uploadId, setUploadId] = useState("");
  const [uploading, setUploading] = useState(false);
  const [deployed, setDeployed] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [statusLogs, setStatusLogs] = useState<StatusLog[]>([]);
  const [copied, setCopied] = useState(false);
  const [checking, setChecking] = useState(false);

  const pushLog = useCallback((message: string, kind: StatusLog["kind"] = "info") => {
    setStatusLogs((l) => [...l, { ts: Date.now(), message, kind }]);
  }, []);

  useEffect(() => {
    if (copied) {
      const t = setTimeout(() => setCopied(false), 1800);
      return () => clearTimeout(t);
    }
  }, [copied]);

  const startDeployment = async () => {
    if (!repoUrl.trim()) return;
    setUploading(true);
    setError(null);
    pushLog("Starting deployment…");
    try {
      const res = await axios.post(`${BACKEND_UPLOAD_URL}/deploy`, { repoUrl });
      setUploadId(res.data.id);
      pushLog(`Deployment queued with id ${res.data.id}`);
      pollStatus(res.data.id);
    } catch (e: any) {
      setError(e?.response?.data?.error || e.message || "Failed to start deployment");
      pushLog("Failed to start deployment", "error");
      setUploading(false);
    }
  };

  const pollStatus = async (id: string) => {
    setChecking(true);
    const interval = setInterval(async () => {
      try {
        const response = await axios.get(`${BACKEND_UPLOAD_URL}/status?id=${id}`);
        const status = response.data.status;
        pushLog(`Status: ${status}`);
        if (status === "deployed") {
          clearInterval(interval);
            setDeployed(true);
            setUploading(false);
            setChecking(false);
            pushLog("Deployment completed", "success");
        }
      } catch (e: any) {
        pushLog("Error fetching status", "error");
      }
    }, 3000);
  };

  const deployedUrl = uploadId ? `http://${uploadId}.ziphub.site` : "";

  const copyUrl = async () => {
    if (!deployedUrl) return;
    await navigator.clipboard.writeText(deployedUrl);
    setCopied(true);
  };

  // subtle parallax effect for background glow based on pointer
  useEffect(() => {
    const handler = (e: MouseEvent) => {
      const x = (e.clientX / window.innerWidth - 0.5) * 20;
      const y = (e.clientY / window.innerHeight - 0.5) * 20;
      document.documentElement.style.setProperty('--mx', `${x}px`);
      document.documentElement.style.setProperty('--my', `${y}px`);
    };
    window.addEventListener('pointermove', handler);
    return () => window.removeEventListener('pointermove', handler);
  }, []);

  return (
    <div className="relative min-h-screen overflow-hidden bg-grid dark:bg-grid-dark">
      <GradientBackdrop />
      <div className="relative z-10 flex flex-col min-h-screen">
        <SiteNav />
        <main className="flex-1 flex flex-col items-center px-4 pb-16">
          <Hero />
          <section className="w-full max-w-3xl mt-10 grid md:grid-cols-2 gap-8 soft-fade" style={{animationDelay:'.08s'}}>
            <DeployCard
              repoUrl={repoUrl}
              setRepoUrl={setRepoUrl}
              uploading={uploading}
              uploadId={uploadId}
              startDeployment={startDeployment}
              checking={checking}
            />
            <StatusCard
              deployed={deployed}
              deployedUrl={deployedUrl}
              copyUrl={copyUrl}
              copied={copied}
              error={error}
              statusLogs={statusLogs}
            />
          </section>
        </main>
        <Footer />
        <div className="fixed bottom-4 right-4"><ThemeToggle /></div>
      </div>
    </div>
  )
}

// --- Layout Components ---
function SiteNav() {
  return (
    <header className="w-full backdrop-blur supports-[backdrop-filter]:bg-white/60 dark:supports-[backdrop-filter]:bg-black/40 border-b border-border/60 sticky top-0 z-20">
      <div className="max-w-6xl mx-auto flex items-center justify-between h-14 px-4">
        <div className="flex items-center gap-2 font-semibold">
          <Rocket data-launch-icon className="h-5 w-5 text-primary" />
          <span className="text-lg tracking-tight">ZipHub</span>
        </div>
        <div className="flex items-center gap-3 text-sm">
          <a className="inline-flex items-center gap-1 text-muted-foreground hover:text-foreground transition-colors" href="https://github.com" target="_blank" rel="noreferrer">
            <Github className="h-4 w-4" /> GitHub
          </a>
        </div>
      </div>
    </header>
  );
}

function Footer() {
  return (
    <footer className="mt-auto w-full border-t border-border/60 bg-background/70 backdrop-blur">
      <div className="max-w-6xl mx-auto px-4 py-6 text-xs text-muted-foreground flex flex-col gap-2 md:flex-row md:items-center md:justify-between">
        <p>© {new Date().getFullYear()} ZipHub. Fast frictionless deploys.</p>
        <p className="opacity-70">Built with love & open source.</p>
      </div>
    </footer>
  );
}

// --- Hero Section ---
function Hero() {
  return (
    <section className="pt-14 md:pt-24 text-center max-w-4xl soft-fade">
      <h1 className="text-4xl md:text-6xl font-bold tracking-tight bg-gradient-to-br from-foreground to-foreground/50 dark:from-white dark:to-white/40 bg-clip-text text-transparent">
        Ship your idea in seconds
      </h1>
      <p className="mt-5 text-lg md:text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed soft-fade" style={{animationDelay:'.05s'}}>
        Paste a GitHub URL & watch the magic happen.
      </p>
    </section>
  );
}

// --- Deploy Form Card ---
function DeployCard({ repoUrl, setRepoUrl, uploading, uploadId, startDeployment, checking }: {
  repoUrl: string;
  setRepoUrl: (v: string) => void;
  uploading: boolean;
  uploadId: string;
  startDeployment: () => void;
  checking: boolean;
}) {
  const disabled = uploading || (!!uploadId && !checking);
  const launchRocket = (e: React.MouseEvent) => {
    const btn = e.currentTarget as HTMLButtonElement;
    const rect = btn.getBoundingClientRect();
    const startX = rect.left + rect.width / 2;
    const startY = rect.top + rect.height / 2;
    const el = document.createElement('div');
    el.className = 'rocket-arc';
    el.style.left = startX + 'px';
    el.style.top = startY + 'px';
    // Clone navbar rocket icon if present for visual consistency
    const source = document.querySelector('[data-launch-icon]') as SVGElement | null;
    let svgHtml: string;
    if (source) {
      // clone and strip sizing classes so we can scale via container
      const clone = source.cloneNode(true) as SVGElement;
      const cls = clone.getAttribute('class');
      if (cls) clone.setAttribute('class', cls.replace(/h-\d+\s*w-\d+/g, ''));
      svgHtml = clone.outerHTML;
    } else {
      // fallback simple rocket path
      svgHtml = `<svg viewBox='0 0 24 24' fill='none' stroke='currentColor'><path d='M5 15c-1.5 1.5-2 4-2 4s2.5-.5 4-2l9-9M9 11l3 3'/><path d='M15 5l2-2 2 2-2 2-2-2Z'/><path d='M12 7l5 5'/></svg>`;
    }
    el.innerHTML = `${svgHtml}<div class='flame'></div>`;
    // particles
    for (let i=0;i<5;i++) {
      const p = document.createElement('div');
      p.className = 'p';
      const angle = (Math.PI * 2 * i)/5 + Math.random()*0.4;
      const dist = 22 + Math.random()*10;
      p.style.setProperty('--tx', `${Math.cos(angle)*dist}px`);
      p.style.setProperty('--ty', `${Math.sin(angle)*dist}px`);
      el.appendChild(p);
    }
    document.body.appendChild(el);
    setTimeout(() => { el.remove(); }, 1500);
  };
  return (
    <Card className="shadow-lg border-border/60 bg-gradient-to-br from-background/80 to-background/40 backdrop-blur">
      <CardHeader>
        <CardTitle className="text-xl flex items-center gap-2">
          <Upload className="h-5 w-5 text-primary" /> Deploy a repo
        </CardTitle>
        <CardDescription>Public GitHub repositories supported for now.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="github-url">Repository URL</Label>
          <Input
            id="github-url"
            value={repoUrl}
            disabled={uploading}
            onChange={(e) => setRepoUrl(e.target.value)}
            placeholder="https://github.com/username/repo"
            className="placeholder:text-muted-foreground/60"
          />
        </div>
        <Button
          onClick={(e) => { if (!uploading && !uploadId) launchRocket(e); startDeployment(); }}
          disabled={!repoUrl.trim() || disabled}
          className="w-full gap-2"
        >
          {uploading && <span className="h-4 w-4 rounded-full border-2 border-transparent border-t-current animate-spin" />}
          {uploading ? "Deploying…" : uploadId ? `In progress (${uploadId})` : "Start deployment"}
        </Button>
      </CardContent>
      {uploadId && !uploading && !checking && (
        <CardFooter className="text-xs text-muted-foreground">
          Deployment starting… monitoring status.
        </CardFooter>
      )}
    </Card>
  );
}

// --- Status Card ---
function StatusCard({ deployed, deployedUrl, copyUrl, copied, error, statusLogs }: {
  deployed: boolean;
  deployedUrl: string;
  copyUrl: () => void;
  copied: boolean;
  error: string | null;
  statusLogs: { ts: number; message: string; kind?: string }[];
}) {
  return (
    <Card className="shadow-lg border-border/60 bg-gradient-to-br from-background/80 to-background/40 backdrop-blur flex flex-col">
      <CardHeader>
        <CardTitle className="text-xl flex items-center gap-2">
          <Rocket className="h-5 w-5 text-primary" /> Status
        </CardTitle>
        <CardDescription>Real‑time updates appear below.</CardDescription>
      </CardHeader>
      <CardContent className="space-y-4 flex-1 flex flex-col">
        <div className="flex-1 min-h-[140px] rounded-md border bg-background/60 p-3 overflow-auto text-xs font-mono leading-relaxed space-y-1">
          {statusLogs.length === 0 && <p className="text-muted-foreground">No logs yet.</p>}
          {statusLogs.map(l => (
            <div key={l.ts} className={l.kind === "error" ? "text-red-500" : l.kind === "success" ? "text-emerald-500" : "text-muted-foreground"}>{new Date(l.ts).toLocaleTimeString()} — {l.message}</div>
          ))}
        </div>
        {error && <p className="text-sm text-red-500">{error}</p>}
        {deployed && (
          <div className="space-y-2 animate-in fade-in slide-in-from-bottom-2">
            <Label>Deployed URL</Label>
            <div className="flex items-center gap-2">
              <Input readOnly value={deployedUrl} />
              <Button onClick={copyUrl} variant="secondary" size="sm" className="gap-1">
                {copied ? <Check className="h-4 w-4" /> : <Copy className="h-4 w-4" />}
                {copied ? "Copied" : "Copy"}
              </Button>
              <Button asChild variant="outline" size="sm" className="gap-1">
                <a href={deployedUrl} target="_blank" rel="noreferrer">
                  <ExternalLink className="h-4 w-4" /> Open
                </a>
              </Button>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

// --- Decorative Gradient Background ---
function GradientBackdrop() {
  return (
    <div aria-hidden className="pointer-events-none absolute inset-0 -z-10 overflow-hidden">
      <div className="absolute -top-40 left-1/2 -translate-x-1/2 h-[700px] w-[1100px] rounded-full bg-gradient-to-tr from-indigo-500/30 via-sky-400/20 to-fuchsia-400/30 blur-3xl opacity-60 dark:opacity-40" />
      <div className="absolute bottom-[-200px] right-[-200px] h-[500px] w-[500px] rounded-full bg-gradient-to-tr from-fuchsia-500/20 via-violet-500/20 to-amber-400/30 blur-3xl opacity-70 dark:opacity-40" />
    </div>
  );
}

